{"version":3,"sources":["components/ContactForm/ContactForm.module.css","services/api.js","redux/contactSlice/contactsOperations.js","redux/contactSlice/contactsSlice.js","redux/store.js","components/ContactForm/ContactForm.jsx","components/SearchFilter/SearchFilter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","index.js","components/ContactList/ContactList.module.css","components/SearchFilter/SearchFilter.module.css"],"names":["module","exports","BASE_URL","fetchData","path","a","options","fetch","res","ok","json","Promise","reject","Error","statusText","API_ENDPOINT","getContacts","createAsyncThunk","addContact","newContact","endpoint","item","finalOptions","method","body","JSON","stringify","headers","api","deleteContact","id","contactsSlice","createSlice","name","initialState","items","filter","reducers","updateFilter","state","payload","extraReducers","builder","addCase","fulfilled","push","idx","findIndex","contact","splice","actions","store","configureStore","reducer","contacts","contactsReducer","middleware","getDefaultMiddleware","concat","logger","devTools","process","ContactForm","onSubmit","useState","setName","number","setNumber","handleChange","event","target","value","className","s","contactform","preventDefault","contactLabel","type","pattern","title","required","onChange","contactInput1","htmlFor","contactInput","contactBtn","Filter","filterSearch","input","ContactList","onClick","handleDeleteBtn","list","map","text","btn","contactsOperations","App","useSelector","dispatch","useDispatch","useEffect","contactName","nanoid","normalizedName","toLowerCase","find","alert","currentTarget","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc424876.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactBtn\":\"ContactForm_contactBtn__2rznv\",\"contactform\":\"ContactForm_contactform__2IqKp\",\"contactLabel\":\"ContactForm_contactLabel__1m_x4\",\"contactInput1\":\"ContactForm_contactInput1__3JZhW\",\"contactInput\":\"ContactForm_contactInput__3AGeb\"};","const BASE_URL = 'https://61bb5963e943920017784e35.mockapi.io';\r\n\r\n// Получить данные\r\nconst fetchData = async (path, options = {}) => {\r\n  const res = await fetch(`${BASE_URL}/${path}`, options);\r\n  return res.ok ? res.json() : Promise.reject(new Error(res.statusText));\r\n};\r\n\r\nconst getData = (endpoint, options) => fetchData(endpoint, options);\r\n\r\n// сохранить элемент\r\nconst saveItem = (endpoint, item, options={}) => {\r\n  const finalOptions = {\r\n    method: 'POST',\r\n    body: JSON.stringify(item),\r\n    headers: {\r\n      'Content-Type': 'application/json; charset=UTF-8',\r\n    },\r\n    ...options,\r\n  };\r\n  return fetchData(endpoint, finalOptions);\r\n};\r\n\r\n// удалить элементы\r\nconst deleteItem = (endpoint, id, options={}) =>\r\n  fetchData(`${endpoint}/${id}`, { method: 'DELETE', ...options });\r\n\r\nexport { getData, saveItem, deleteItem };","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as api from '../../services/api';\r\n\r\nconst API_ENDPOINT='contacts'\r\n\r\nconst getContacts = createAsyncThunk('contacts/getContactsStatus', () =>\r\n    api.getData(API_ENDPOINT),\r\n);\r\n\r\nconst addContact = createAsyncThunk('contacts/addContactStatus', newContact =>\r\n    api.saveItem(API_ENDPOINT,newContact),\r\n);\r\n\r\nconst deleteContact = createAsyncThunk('contacts/deleteContactStatus', id =>\r\n    api.deleteItem(API_ENDPOINT,id),\r\n);\r\n\r\nexport { getContacts, addContact, deleteContact };","import { createSlice } from \"@reduxjs/toolkit\";\nimport {getContacts, addContact, deleteContact\n} from './contactsOperations';\n\nconst initialState = {\n  items: [],\n  filter: \"\",\n};\n\nconst contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState,\n  reducers: {\n    //   setContacts: (state, { payload }) => ({ ...state, items: payload }),\n    //   addContacts: (state, { payload }) => ({\n    //     ...state,\n    //     items: [...state.items, payload],\n    //   }),\n    //   deleteContacts: (state, { payload }) => ({\n    //     ...state,\n    //     items: state.items.filter((contact) => contact.id !== payload),\n    //   }),\n    updateFilter: (state, { payload }) => ({ ...state, filter: payload }),\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(getContacts.fulfilled, (state, { payload }) => {\n        state.items = payload;\n      })\n      .addCase(addContact.fulfilled, (state, { payload }) => {\n        state.items.push(payload);\n      })\n      .addCase(deleteContact.fulfilled, (state, { payload }) => {\n        const idx = state.items.findIndex(contact => contact.id === payload.id);\n        state.items.splice(idx, 1);\n      })\n  }\n});\n\nexport const {updateFilter } = contactsSlice.actions;\n\nexport default contactsSlice.reducer;\n\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport contactsReducer from \"./contactSlice/contactsSlice\";\n\nconst store = configureStore({\n  reducer: { contacts: contactsReducer },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\nexport default store;\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSubmit(name, number);\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <div className={s.contactform}>\n      <form onSubmit={handleSubmit}>\n        <label className={s.contactLabel}>\n          Name :\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            className={s.contactInput1}\n          />\n        </label>\n        <label htmlFor=\"\" className={s.contactLabel}>\n          Number :\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleChange}\n            className={s.contactInput}\n          />\n        </label>\n        <button type=\"submit\" className={s.contactBtn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\nexport default ContactForm;\n","import PropTypes from \"prop-types\";\nimport s from \"./SearchFilter.module.css\";\n\nconst Filter = ({ filter, onChange }) => (\n  <div className={s.filterSearch}>\n    <label className={s.filter}>\n      Find contacts by name:\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onChange}\n        className={s.input}\n      />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport s from \"./ContactList.module.css\";\n\nconst ContactList = ({ contacts, onClick }) => {\n  const handleDeleteBtn = (event) => {\n    const { name } = event.target;\n    onClick(name);\n  };\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <p className={s.text}>{name} :</p>\n          <p className={s.text}>{number} </p>\n\n          <button\n            type=\"button\"\n            name={id}\n            onClick={handleDeleteBtn}\n            className={s.btn}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport ContactForm from \"../ContactForm/ContactForm.jsx\";\nimport Filter from \"../SearchFilter/SearchFilter.jsx\";\nimport ContactList from \"../ContactList/ContactList.jsx\";\n// import * as storage from \"../../services/localStorage\";\nimport { contactsOperations } from '../../redux/contactSlice';\nimport * as actions from \"../../redux/contactSlice/contactsSlice\";\n\nconst { getContacts, addContact, deleteContact } = contactsOperations;\n\nconst App = () => {\n  const contacts = useSelector((state) => state.contacts.items);\n  const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n    // const contacts = storage.get(\"contacts\");\n    // if (contacts && contacts.length > 0) {\n    //   dispatch(actions.setContacts(contacts));\n    // }\n  }, [dispatch]);\n\n  // useEffect(() => {\n  //   storage.save(\"contacts\", contacts);\n  // }, [contacts]);\n\n  const addNewContact = (name, number) => {\n    const contactName = { name, number, id: nanoid() };\n    const normalizedName = name.toLowerCase();\n    const duplicateName = contacts.find(\n      (contact) => contact.name.toLowerCase() === normalizedName\n    );\n\n    if (duplicateName) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    if (name === \"\") {\n      alert(\"Please type your info in the field. It is empty.\");\n    } else {\n      dispatch(addContact(contactName));\n    }\n  };\n\n  // const deleteContact = (id) => {\n  //   dispatch(contacts.filter((contact) => contact.id !== id));\n  // };\n  const removeContact = (id) => {\n    dispatch(deleteContact(id));\n  };\n\n  const filterContacts = () => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const updateFilter = (event) => {\n    dispatch(actions.updateFilter(event.currentTarget.value));\n  };\n\n  return (\n    <>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={addNewContact} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={updateFilter} />\n        <ContactList contacts={filterContacts()} onClick={removeContact} />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./components/App/App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3CReJ\",\"item\":\"ContactList_item__2bJzt\",\"text\":\"ContactList_text__1lJx9\",\"btn\":\"ContactList_btn__1bn2U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"SearchFilter_filter__14Bt5\",\"input\":\"SearchFilter_input__3HAtd\",\"filterSearch\":\"SearchFilter_filterSearch__2-Ks6\"};"],"sourceRoot":""}